DM 'CLEAR LOG';

/********************************************************************************************/
/*  CLIENT NAME:	NAVY FINANCIAL MANAGEMENT OPERATIONS 		   							*/
/*					DEPARTMENT OF THE NAVY (DoN), DEPARTMENT OF DEFENSE (DoD)				*/
/*																							*/
/*  PROJECT:	  	NAVY FINANCIAL MANAGEMENT OPERATIONS (FMO-4)					 		*/
/*   																						*/
/*  PROGRAM NAME:   comfisc Reconciliation.sas						  						*/
/*																							*/
/*  PURPOSE:		THE PURPOSE OF THIS PROGRAM IS TO TRACE THE JAN&FEB Fiscal Year comfisc			*/
/*					CVP FEEDER SYSTEM TRANSACTIONS TO STARS_FL					   			*/
/*																				  			*/
/********************************************************************************************/
/*  PROGRAMMER: 	PAUL SEEL											*/
/********************************************************************************************/
/*  MODIFIED: 		JACOB CAREY				    					*/
/*	CHANGES MADE:	ADDED CODE FOR ROOT CAUSE ANALYSIS										*/
/*  MODIFIED: 		TARAESA TONEY			    						*/
/*	CHANGES MADE:	MODIFIED TO APPLY TO SPS												*/
/*  MODIFIED: 		PAUL SEEL				    					*/
/*	CHANGES MADE:	MODIFIED TO INCLUDE LINKING TO DOCUMENT NUMBER							*/
/********************************************************************************************/
/*  RUN TIME: 		APPROX 1 HOUR															*/
/********************************************************************************************/

%LET DATE = %SYSFUNC(TODAY(),YYMMDDN8.); 
%LET LOG_NAME = FL_comfisc_RECONCILIATION;
%LET LOG_PATH = H:\navy_fmo\Audit Readiness\SEGMENTS\CVP\Feeder System Reconciliation\SPS\COMFISC\SAS Codes and Logs;
%LET OUTPATH = H:\navy_fmo\Audit Readiness\SEGMENTS\CVP\Feeder System Reconciliation\SPS\COMFISC\Outputs\Output_&date..xls;

LIBNAME FL_DEC 'H:\navy_fmo\Audit Readiness\SOURCE DATA\STARS-FL\FY\DEC\SAS Datasets';
LIBNAME FL_JAN 'H:\navy_fmo\Audit Readiness\SOURCE DATA\STARS-FL\FY\JAN\SAS Datasets';
LIBNAME FL_FEB 'H:\navy_fmo\Audit Readiness\SOURCE DATA\STARS-FL\FY\FEB\SAS Datasets';
LIBNAME FL_MAR 'H:\navy_fmo\Audit Readiness\SOURCE DATA\STARS-FL\FY\MAR\SAS Datasets';

LIBNAME comfisc 'H:\navy_fmo\Audit Readiness\SEGMENTS\CVP\Feeder System Reconciliation\SPS\COMFISC\SAS Datasets';
LIBNAME navsup 'H:\navy_fmo\Audit Readiness\SEGMENTS\CVP\Feeder System Reconciliation\SPS\NAVSUP\SAS Datasets';
LIBNAME MATCH 'H:\navy_fmo\Audit Readiness\SEGMENTS\CVP\Feeder System Reconciliation\Matched Data Sets';

/********************************************************************************************/
/* MACRO TO SUMMARIZE DATASET AND PROVIDE CONTROL TOTALS.									*/
/********************************************************************************************/
%MACRO CONTROL_TOTALS(DSN, VAR_LIST);
                PROC SUMMARY DATA=&DSN. NWAY MISSING;
                        VAR &VAR_LIST.;
                        OUTPUT OUT=SUMM SUM=;
                RUN;
                %LET CNT = %EVAL(%SYSFUNC(LENGTH(%SYSFUNC(COMPBL("&VAR_LIST."))))-%SYSFUNC(LENGTH(%SYSFUNC(COMPRESS("&VAR_LIST."))))+1);
                %PUT "COUNT OF VARIABLES: &CNT.";
                DATA _NULL_;
                        SET SUMM;
                        FORMAT _FREQ_ COMMA20.;
                        FORMAT &VAR_LIST. COMMA30.2;
                        PUT @3 '----------------------------------------------------'/;
                        PUT @5 "CONTROL TOTAL AND TOTAL NUMBER OF RECORDS IN &DSN."/;
                        PUT @10 'TOTAL NUMBER OF RECORDS = ' _FREQ_/;
                        %DO I = 1 %TO &CNT.;
                                %LET VAR = %SCAN(&VAR_LIST.,&I.);
                                PUT @10 "TOTAL OF &VAR. = " &VAR./;
                        %END;
                        PUT @3 '----------------------------------------------------'/;
                RUN;
%MEND;
/********************************************************************************************/ 
/* MACROS TO EXPORT A DATASET.                                                                                                                          */ 
/********************************************************************************************/
%MACRO EXPORT_XLS(DATASET);     
        PROC EXPORT DATA = &DATASET. DBMS = EXCEL 
                FILE = "&OUTPATH." REPLACE;
				SHEET = "&DATASET."; 
        RUN; 
%MEND;

*%CONTROL_TOTALS(FL_JAN.FL_FY_JAN,AMOUNT_USSGL_FINAL);
/*UTILIZE THE STARS-FL JAN&FEB FY POPULATION AND LIMIT TO TRANSACTIONS TO CERTAIN GL4'S BASED ON CFMS EXECUTION CODES*/

DATA FL_RECON; 
	SET FL_JAN.FL_FY_JAN FL_FEB.FL_FY_FEB;
where APN_BEG_FIS_YR IN ('13')and
	SUBSTR(GL4,1,1)='4' and
	GA='17';

RUN;

DATA FL_RECON_DEC;
	SET FL_DEC.FL_FY_DEC;
	where APN_BEG_FIS_YR IN ('13') and
	SUBSTR(GL4,1,1)='4'
	and GA='17';
RUN;

/*SORT AND INDEX THE FL DATA*/
PROC SORT DATA =fl_recon;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
RUN;

DATA FL_RECON_INDEX;
	SET FL_RECON;

	INDEX + 1;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
	IF FIRST.PIIN OR FIRST.APN_SBH OR FIRST.APN_SYM OR FIRST.AMOUNT_USSGL_FINAL THEN INDEX = 1;
	fl_gl=gl4;
RUN;

DATA SPS_IN_SCOPE SPS_OUT_OF_SCOPE;
	SET comfisc.comfisc_all (RENAME=(BASIC_PIIN=PIIN)) navsup.nav_all (RENAME=(BASIC_PIIN=PIIN));
	AMOUNT_USSGL_FINAL=Final_Net_Amt2;
	where GA='17';
	IF AMOUNT_USSGL_FINAL NE . THEN ABS_AMT=abs(Final_Net_Amt2);
	IF LEDGER ^='FL' or FY NE '3' THEN OUTPUT SPS_OUT_OF_SCOPE;
	ELSE OUTPUT SPS_IN_SCOPE;
RUN;

/*SORT AND INDEX CFMS TRANSACTIONS THAT HAVE A DOCUMENT NUMBER*/
PROC SORT DATA = SPS_IN_SCOPE;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
RUN;

DATA SPS_INDEX;
	SET SPS_IN_SCOPE;

	INDEX + 1;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
	IF FIRST.PIIN OR FIRST.APN_SBH OR FIRST.APN_SYM OR FIRST.AMOUNT_USSGL_FINAL THEN INDEX = 1;

RUN;

*Sort SPS dataset;
PROC SORT DATA = SPS_INDEX;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
RUN;

DATA FL_AND_SPS 
	 FL_ONLY 
	 SPS_ONLY;

	MERGE FL_RECON_INDEX (IN = A) 
		  SPS_INDEX (IN = B); *keep=PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX ABS_AMT DOCUMENT_NR);

	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX;

	IF A AND B THEN OUTPUT FL_AND_SPS;
	IF A AND NOT B THEN OUTPUT FL_ONLY;
	IF B AND NOT A THEN OUTPUT SPS_ONLY;
RUN;
%CONTROL_TOTALS(FL_AND_SPS,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_ONLY,AMOUNT_USSGL_FINAL ABS_AMT);

/****DELETE TABLES USE DIN MERGE*/
proc datasets;
delete 	FL_RECON
		FL_RECON_INDEX  
		SPS_OUT_OF_SCOPE;
		*SPS_IN_SCOPE
		SPS_INDEX;
quit;
	
/***Query Dec data***/
PROC SORT DATA =FL_RECON_DEC;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
RUN;

DATA FL_RECON_INDEX2;
	SET FL_RECON_DEC;

	INDEX + 1;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
	IF FIRST.PIIN OR FIRST.APN_SBH OR FIRST.APN_SYM OR FIRST.AMOUNT_USSGL_FINAL THEN INDEX = 1;
	fl_gl=gl4;
RUN;

DATA SPS_INDEX2;
	SET SPS_ONLY(drop=index);

	INDEX + 1;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
	IF FIRST.PIIN OR FIRST.APN_SBH OR FIRST.APN_SYM OR FIRST.AMOUNT_USSGL_FINAL THEN INDEX = 1;

RUN;

DATA FL_AND_SPS2 
	 FL_ONLY2 
	 SPS_ONLY2;

	MERGE FL_RECON_INDEX2 (IN = A) 
		  SPS_INDEX2 (IN = B keep=PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX SUPPLMTRY_PIIN TOTAL_AMT_OF_CONT ADMIN_CONT_FOR_RESP 
		  PAYING_OFFICE	CONTRACT_TYPE_CODE VARIANCE_PCT_AUTH PROMPT_PAY_TERMS_CODE DISCOUNT_TERMS 
		  CONTRACT_AWARD_DATE VENDOR_NAME_AND_ADDR COMPLETION_DATE ACCEPTANCE_CODE CONTRACT_DESCRIPTION 
		  CLIN_SUBCLIN DOCUMENT_NR RQN_CUR_LN_NR CLIN_QUANTITY	SUBCLIN_QUANTITY EXTENDED_AMOUNT UNIT_OF_ISSUE 
		  SIGNAL_CODE JOB_ORDER_NR COG_SYMBOL FUND_CODE	ORIGL_FUND_CODE	FUNDING_MODFD_IND ACRN STANDARD_ACCOUNTING
		  COST_CODE	FSCM DUNS_NR REMIT_FSCM	REMIT_DUNS_NR FIN_UNIT_PRICE CST_PRC_CODE NET_AMOUNT TRADE_DISCT_PCT
		  SERVICE_START_DATE FOB_SITE_CODE INSPECTION_SITE_CODE	INSPECTOR_CODE ACCEPTER_CODE INVOICE_TO_UIC	
		  ACCTG_FREE_TEXT_LN TRANSPORTATION_ACCOUNT_CODE TRANSPORTATION_AMOUNT FIN_CMDY_CD FIN_SHIP_MODE_CD	
		  FIN_RFRNC_ACRN FIN_CNTRCT_MOD_NR FIN_CRNCY_CD	FIN_EXCHNG_RT FIN_INT_DBOF_LONG_LINE 
		  FIN_INT_DBOF_JOB_ORDER_NR	FIN_INT_DBOF_ACNTNG_DCMNT_NR FINAL_NET_AMT	FINAL_TOTAL_AMT_OF_CONT	
		  FINAL_EXTENDED_AMOUNT	FINAL_FIN_UNIT_PRICE FINAL_TRANSPORTATION_AMOUNT FINAL_NET_AMT2	FY OBJ_CLSS	BCN	
		  SUB AAA TRANS_CODE LEDGER	ABS_AMT);

	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX;

	IF A AND B THEN OUTPUT FL_AND_SPS2;
	IF A AND NOT B THEN OUTPUT FL_ONLY2;
	IF B AND NOT A THEN OUTPUT SPS_ONLY2;
RUN;
%CONTROL_TOTALS(FL_AND_SPS2,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_ONLY2,AMOUNT_USSGL_FINAL ABS_AMT);

/****DELETE TABLES USE DIN MERGE*/
PROC DATASETS;
DELETE 	FL_RECON_DEC
		FL_RECON_INDEX2
		SPS_INDEX2;
QUIT;

/******Use Doc_key in FL and DOCUMENT_NR in SPS from remaining population*****/
PROC SORT DATA=SPS_ONLY2;
BY DOCUMENT_NR APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
RUN;

DATA SPS_INDEX3;
	SET SPS_ONLY2(drop=index rename=(DOCUMENT_NR=doc_num));

	INDEX + 1;
	BY doc_num APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
	IF FIRST.doc_num OR FIRST.APN_SBH OR FIRST.APN_SYM OR FIRST.AMOUNT_USSGL_FINAL THEN INDEX = 1;

RUN;
/*COMBINE THE FL_ONLY POPULATION FROM JAN AND FEB WITH DEC*/
DATA FL_ONLY_ALL;
SET FL_ONLY
	FL_ONLY2;
RUN;
PROC SORT DATA=FL_ONLY_ALL;
BY DOC_KEY APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
RUN;

DATA FL_RECON_INDEX_doc;
	SET FL_ONLY_ALL(drop=index rename=(DOC_key=doc_num));

	INDEX + 1;
	BY doc_num APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
	IF FIRST.doc_num OR FIRST.APN_SBH OR FIRST.APN_SYM OR FIRST.AMOUNT_USSGL_FINAL THEN INDEX = 1;
	fl_gl=gl4;
RUN;

DATA FL_AND_SPS_doc 
	 FL_ONLY3 
	 SPS_ONLY_doc;

	MERGE FL_RECON_INDEX_doc (IN = A) 
		  SPS_INDEX3 (IN = B  keep=PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX SUPPLMTRY_PIIN TOTAL_AMT_OF_CONT ADMIN_CONT_FOR_RESP 
		  PAYING_OFFICE	CONTRACT_TYPE_CODE VARIANCE_PCT_AUTH PROMPT_PAY_TERMS_CODE DISCOUNT_TERMS 
		  CONTRACT_AWARD_DATE VENDOR_NAME_AND_ADDR COMPLETION_DATE ACCEPTANCE_CODE CONTRACT_DESCRIPTION 
		  CLIN_SUBCLIN doc_num RQN_CUR_LN_NR CLIN_QUANTITY	SUBCLIN_QUANTITY EXTENDED_AMOUNT UNIT_OF_ISSUE 
		  SIGNAL_CODE JOB_ORDER_NR COG_SYMBOL FUND_CODE	ORIGL_FUND_CODE	FUNDING_MODFD_IND ACRN STANDARD_ACCOUNTING
		  COST_CODE	FSCM DUNS_NR REMIT_FSCM	REMIT_DUNS_NR FIN_UNIT_PRICE CST_PRC_CODE NET_AMOUNT TRADE_DISCT_PCT
		  SERVICE_START_DATE FOB_SITE_CODE INSPECTION_SITE_CODE	INSPECTOR_CODE ACCEPTER_CODE INVOICE_TO_UIC	
		  ACCTG_FREE_TEXT_LN TRANSPORTATION_ACCOUNT_CODE TRANSPORTATION_AMOUNT FIN_CMDY_CD FIN_SHIP_MODE_CD	
		  FIN_RFRNC_ACRN FIN_CNTRCT_MOD_NR FIN_CRNCY_CD	FIN_EXCHNG_RT FIN_INT_DBOF_LONG_LINE 
		  FIN_INT_DBOF_JOB_ORDER_NR	FIN_INT_DBOF_ACNTNG_DCMNT_NR FINAL_NET_AMT	FINAL_TOTAL_AMT_OF_CONT	
		  FINAL_EXTENDED_AMOUNT	FINAL_FIN_UNIT_PRICE FINAL_TRANSPORTATION_AMOUNT FINAL_NET_AMT2	FY OBJ_CLSS	BCN	
		  SUB AAA TRANS_CODE LEDGER	ABS_AMT);

	BY doc_num APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX;

	IF A AND B THEN OUTPUT FL_AND_SPS_doc;
	IF A AND NOT B THEN OUTPUT FL_ONLY3;
	IF B AND NOT A THEN OUTPUT SPS_ONLY_doc;
RUN;
%CONTROL_TOTALS(FL_AND_SPS_doc,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_ONLY_doc,AMOUNT_USSGL_FINAL ABS_AMT);

/****DELETE TABLES USE DIN MERGE*/
PROC DATASETS;
DELETE 	FL_RECON_INDEX_doc
		SPS_INDEX3
		FL_ONLY2;
		*FL_ONLY;
QUIT;

*Drop zero amounts from unmapped table and create a 'reason for varaince' field;
Data SPS_NO_Zero SPS_ZERO_AMT;
set SPS_ONLY_doc;
FORMAT VARIANCE_REASON $110.;
IF AMOUNT_USSGL_FINAL=0.00 THEN VARIANCE_REASON = 'ZERO AMOUNT';
IF AMOUNT_USSGL_FINAL NE 0.00 THEN OUTPUT SPS_NO_Zero;
ELSE OUTPUT SPS_ZERO_AMT;
Run;



/********************************************************************/
/****THE REMAINING CODE IS A SERIES OF TESTS TO EXPLAIN VARIANCES****/
/********************************************************************/

/***Query March data***/

DATA FL_RECON_MAR;
      SET FL_MAR.fl_FY_mar;
      where APN_BEG_FIS_YR IN ('13') and
      SUBSTR(GL4,1,1)='4'
      and GA='17';
RUN;

  PROC SORT DATA =FL_RECON_MAR;
      BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
  RUN;


DATA FL_RECON_INDEX3;
	SET FL_RECON_MAR;
	INDEX + 1;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
	IF FIRST.PIIN OR FIRST.APN_SBH OR FIRST.APN_SYM OR FIRST.AMOUNT_USSGL_FINAL THEN INDEX = 1;
	fl_gl=gl4;
RUN;

PROC SORT DATA=SPS_NO_Zero;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
RUN;

DATA SPS_INDEX4;
	SET SPS_NO_Zero(drop=index);
	INDEX + 1;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
	IF FIRST.PIIN OR FIRST.APN_SBH OR FIRST.APN_SYM OR FIRST.AMOUNT_USSGL_FINAL THEN INDEX = 1;
RUN; 


  DATA FL_AND_SPS4
       FL_ONLY4
       SPS_ONLY4 (keep=PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL VARIANCE_REASON);

     MERGE FL_RECON_INDEX3 (IN = A)
            SPS_INDEX4 (IN = B);

     BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX;

      IF A AND B THEN DO;
	  	VARIANCE_REASON = 'FOUND IN MARCH';
		OUTPUT FL_AND_SPS4;
	  END;
      IF A AND NOT B THEN OUTPUT FL_ONLY4;
      IF B AND NOT A THEN OUTPUT SPS_ONLY4;
  RUN;

DATA FL_AND_SPS4;
set FL_AND_SPS4 (keep=PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL VARIANCE_REASON);
run;

%CONTROL_TOTALS(FL_AND_SPS4,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_ONLY4,AMOUNT_USSGL_FINAL ABS_AMT);
/****DELETE TABLES USE DIN MERGE*/
PROC DATASETS;
DELETE 	FL_RECON_INDEX3
		SPS_INDEX4;
QUIT;


/******Prepare data for merge between remaining non-matches summarized by AMOUNT_USSGL_FINAL and FL data for all 4 months*****/
/*COMBINE THE FL_ONLY POPULATION FROM JAN AND FEB WITH DEC*/

/*DATA FL_ONLY_4MNTHS;
SET FL_ONLY_ALL
	FL_ONLY4;
RUN;*/

DATA FL_ONLY_4MNTHS;
	SET FL_JAN.FL_FY_JAN FL_FEB.FL_FY_FEB FL_DEC.FL_FY_DEC FL_MAR.fl_FY_mar;
	where APN_BEG_FIS_YR IN ('13') and
	SUBSTR(GL4,1,1)='4' and 
	GA='17';
RUN;

PROC SORT DATA =FL_ONLY_4MNTHS;
  BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
RUN;

DATA FL_RECON_INDEX4;
	SET FL_ONLY_4MNTHS(drop=index);
	INDEX + 1;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
	IF FIRST.PIIN OR FIRST.APN_SBH OR FIRST.APN_SYM OR FIRST.AMOUNT_USSGL_FINAL THEN INDEX = 1;
	fl_gl=gl4;
RUN;

  *Summarize by AMOUNT_USSGL_FINAL;
  PROC SUMMARY DATA = SPS_ONLY4 NWAY MISSING;
      CLASS PIIN APN_SBH APN_SYM;
      VAR AMOUNT_USSGL_FINAL;
      OUTPUT OUT = SPS_ONLY4_SUM (DROP=_TYPE_) SUM=;
  RUN;


  DATA SPS_INDEX5;
      SET SPS_ONLY4_SUM;
      INDEX + 1;
      BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
	IF FIRST.PIIN OR FIRST.APN_SBH OR FIRST.APN_SYM OR FIRST.AMOUNT_USSGL_FINAL THEN INDEX = 1;
RUN;


  DATA FL_AND_SPS5(keep=PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL VARIANCE_REASON)
       FL_ONLY5
       SPS_ONLY5 (keep =PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX VARIANCE_REASON);

     MERGE FL_RECON_INDEX4 (IN = A)
            SPS_INDEX5 (IN = B);

     BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX;

      IF A AND B THEN DO;
	  	VARIANCE_REASON = 'FOUND IN AGGREGATED AMOUNT'; 
		OUTPUT FL_AND_SPS5;
		END;
      IF A AND NOT B THEN OUTPUT FL_ONLY5;
      IF B AND NOT A THEN OUTPUT SPS_ONLY5;
  RUN;

%CONTROL_TOTALS(FL_AND_SPS6,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_ONLY6,AMOUNT_USSGL_FINAL ABS_AMT);




/******Prepare data for merge between remaining non-matches and NON-BUDGETARY FL data for all 4 months*****/

DATA FL_NON_BUD;
	SET FL_JAN.FL_FY_JAN FL_FEB.FL_FY_FEB FL_DEC.FL_FY_DEC FL_MAR.fl_FY_mar;
	where APN_BEG_FIS_YR IN ('13') and
	SUBSTR(GL4,1,1) NE '4'
	and GA='17';
RUN;

/*SORT AND INDEX THE FL DATA*/
PROC SORT DATA =FL_NON_BUD;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
RUN;

DATA FL_RECON_INDEX;
	SET FL_NON_BUD;

	INDEX + 1;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
	IF FIRST.PIIN OR FIRST.APN_SBH OR FIRST.APN_SYM OR FIRST.AMOUNT_USSGL_FINAL THEN INDEX = 1;
	fl_gl=gl4;
RUN;

PROC SORT DATA=SPS_ONLY5;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
RUN;

DATA SPS_INDEX6;
	SET SPS_ONLY5(drop=index);
	INDEX + 1;
	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;
	IF FIRST.PIIN OR FIRST.APN_SBH OR FIRST.APN_SYM OR FIRST.AMOUNT_USSGL_FINAL THEN INDEX = 1;
RUN;


  DATA FL_AND_SPS6(keep=PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL VARIANCE_REASON)
       FL_ONLY6(keep=PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL VARIANCE_REASON)
       SPS_ONLY6;

     MERGE FL_RECON_INDEX (IN = A)
            SPS_INDEX6 (IN = B);

     BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX;

      IF A AND B THEN DO;
	  	VARIANCE_REASON = 'FOUND IN NON BUDGETARY ACCOUNT'; 
		OUTPUT FL_AND_SPS6;
		END;
      IF A AND NOT B THEN OUTPUT FL_ONLY6;
      IF B AND NOT A THEN OUTPUT SPS_ONLY6;
  RUN;


%CONTROL_TOTALS(FL_AND_SPS5,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_ONLY5,AMOUNT_USSGL_FINAL ABS_AMT);


*****Place detail back into final unmapped table***;

  DATA SPS_ONLY6_2;
      SET SPS_ONLY6(drop=AMOUNT_USSGL_FINAL ABS_AMT FINAL_NET_AMT	FINAL_TOTAL_AMT_OF_CONT	
		  FINAL_EXTENDED_AMOUNT FINAL_NET_AMT2);
RUN;

PROC SORT DATA =SPS_ONLY6_2;
  BY PIIN APN_SBH APN_SYM;
RUN;

PROC SORT DATA =SPS_ONLY_doc;
  BY PIIN APN_SBH APN_SYM;
RUN;

DATA SPS6_AND_SPSdoc
       SPS6_ONLY2
       SPS_doc2;

     MERGE SPS6_2 (IN = A)
            SPS_ONLY_doc (IN = B  keep=PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL);

     BY PIIN APN_SBH APN_SYM;

      IF A AND B THEN OUTPUT SPS6_AND_SPSdoc;
      IF A AND NOT B THEN OUTPUT SPS6_ONLY2;
      IF B AND NOT A THEN OUTPUT SPS_doc2;
  RUN;
%CONTROL_TOTALS(SPS6_AND_SPSdoc,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS6_ONLY2,AMOUNT_USSGL_FINAL ABS_AMT);

*****Place detail back into mapped table***;

  DATA FL_AND_SPS6_2;
      SET FL_AND_SPS6(drop=AMOUNT_USSGL_FINAL);
RUN;

PROC SORT DATA =FL_AND_SPS6_2;
  BY PIIN APN_SBH APN_SYM;
RUN;

PROC SORT DATA =SPS_ONLY_doc;
  BY PIIN APN_SBH APN_SYM;
RUN;

DATA FL_SPS6_AND_doc
       FL_SPS6_ONLY2
       SPS_doc3;

     MERGE FL_AND_SPS6_2 (IN = A)
            SPS_ONLY_doc (IN = B  keep=PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL);

     BY PIIN APN_SBH APN_SYM;

      IF A AND B THEN OUTPUT FL_SPS6_AND_doc;
      IF A AND NOT B THEN OUTPUT FL_SPS6_ONLY2;
      IF B AND NOT A THEN OUTPUT SPS_doc3;
  RUN;
%CONTROL_TOTALS(FL_SPS6_AND_doc,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(FL_SPS6_ONLY2,AMOUNT_USSGL_FINAL ABS_AMT);

/*Collect all matches*/
DATA MATCH.FL_SPS_ALL (drop = DOCUMENT_NR);
SET FL_AND_SPS
	FL_AND_SPS2
	fl_and_sps_doc
	FL_AND_SPS4
	FL_AND_SPS5
	SUM_AND_SPS5/*
	FL_AND_SPS6;*/;
RUN;
%CONTROL_TOTALS(MATCH.FL_SPS_ALL,AMOUNT_USSGL_FINAL ABS_AMT);


 *Summarize mapped non-budgetary accounts by account;
proc summary data= FL_AND_SPS5 NWAY MISSING;
  class GL4;
	VAR AMOUNT_USSGL_FINAL; 
  output out=FL_AND_SPS5_GL4; 
  run;



*Show SPS5 that had zero amounts;

Data SPS_ZERO_AMT;
set Sps5;
where AMOUNT_USSGL_FINAL IN (0.00);
Run;

/*Proc Sort Data=Sps_index;
By PIIN;
Run;

Proc Sort Data=Sps_only6_AMT;
By PIIN;
Run;


DATA SPS_ZERO_AMT 
	 SPS_ZERO_ONLY
	 SPS_only6_ONLY;

	MERGE Sps_index (IN = A) 
		 Sps_only6_AMT (IN = B);

	BY PIIN;

	IF A AND B THEN OUTPUT SPS_ZERO_AMT;
	IF A AND NOT B THEN OUTPUT SPS_ZERO_ONLY ;
	IF B AND NOT A THEN OUTPUT SPS_only6_ONLY;*/

	
RUN;
%CONTROL_TOTALS(Sps5_AMT,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_ZERO_AMT,AMOUNT_USSGL_FINAL ABS_AMT);


/********************************************************************************************/
/*                               OTHER CONTROL TOTALS                                     */
/********************************************************************************************/

%CONTROL_TOTALS(SPS_INDEX,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(FL_RECON_INDEX2,AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(FL_RECON_INDEX,AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(FL_AND_SPS_doc,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(FL_AND_SPS2,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(FL_AND_SPS,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_ONLY,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(FL_ONLY2,AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(FL_ONLY,AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(FL_RECON_INDEX,AMOUNT_USSGL_FINAL);



/********************************************************************************************/
/* APPLY INTERFACE LOGIC FOR STARS-FL.												 		*/
/********************************************************************************************/
DATA FL_INTERFACE;
	SET FL_ONLY;
	FORMAT FEEDER_SYSTEM $110.;
	where datamonth not in ('DECFY')and
	substr(EVENT_TSTMP,6,2) not in ('03');
	IF DATA_SRC_CODE	= '8' 
		OR ((USR_ID = 'FASTDATA' OR SUBSTR(USR_ID,1,2) = 'FD') AND SCREEN_ID IN ('LXT26S1','LXT25S1'))
		OR SUBSTR(USR_ID,LENGTH(STRIP(USR_ID))-1,2) IN ('FD','WB') THEN FEEDER_SYSTEM ='FASTDATA';

	ELSE IF (DATA_SRC_CODE = 'M' AND USR_ID = 'COST')
		OR (DATA_SRC_CODE	= 'c' AND APN_OB_OR_BCN IN ('42158','39040','50054','4523A','32253'))
		OR (USR_ID IN ('COSTSYS','00000000') AND APN_OB_OR_BCN IN ('42158','39040','50054','4523A','32253')
			AND SCREEN_ID IN ('LXT26S1','LXT25S1'))
		OR  (SUBSTR(USR_ID,LENGTH(STRIP(USR_ID))-1,2) = 'CS' AND APN_OB_OR_BCN IN ('42158','39040','50054','4523A','32253')) THEN FEEDER_SYSTEM = 'SYMIS (COST)';
		
	ELSE IF (DATA_SRC_CODE	= 'c' AND APN_OB_OR_BCN IN ('4002A','55262','62758'))
		OR (USR_ID IN ('COSTSYS','00000000') AND APN_OB_OR_BCN IN ('4002A','55262','62758')
			AND SCREEN_ID IN ('LXT26S1','LXT25S1'))
		OR (SUBSTR(USR_ID,LENGTH(STRIP(USR_ID))-1,2) = 'CS' AND APN_OB_OR_BCN IN ('4002A','55262','62758')) THEN FEEDER_SYSTEM = 'AIM (ADVANCED INFORMATION MANAGEMENT)';

	ELSE IF DATA_SRC_CODE	= '['
		OR ((USR_ID = 'COSTSYS' OR SUBSTR(USR_ID,1,3) = 'CNI' OR SUBSTR(USR_ID,1,2) = 'CF') 
			AND APN_OB_OR_BCN NOT IN ('42158','39040','50054','4002A','55262','4523A','32253','62758') 
			AND SCREEN_ID IN ('LXT26S1','LXT25S1'))
		OR SUBSTR(USR_ID,LENGTH(STRIP(USR_ID))-1,2) = 'CF' THEN FEEDER_SYSTEM = 'CFMS';

	ELSE IF DATA_SRC_CODE	= ')' THEN FEEDER_SYSTEM = 'FIS';

	ELSE IF DATA_SRC_CODE	= '}' AND USR_ID = 'RESFMS' THEN FEEDER_SYSTEM = 'RIMS (REFMS)';

	ELSE IF DATA_SRC_CODE	= '3' THEN FEEDER_SYSTEM = 'DCAS';/* PER KATIE's EMAIL ON 01-08-13, COMBINING SPS FROM DCAS WITH DCAS BUCKET */

	ELSE IF DATA_SRC_CODE	= 'S' THEN FEEDER_SYSTEM = '1960 SUSPENSE RECYCLED TRANSACTIONS';

	ELSE IF DATA_SRC_CODE	= 'Y' AND SUBSTR(USR_ID,1,1) = 'K' THEN FEEDER_SYSTEM = 'ONLINE - MANUAL';	

	ELSE IF (RGT_NR IN ('33','05',' ') 
			AND (SUBSTR(PY_VCH_NR,1,2) IN ('EC','ED','FC','FD','GC','GD') 
				OR SUBSTR(PY_VCH_NR,1,1) IN ('W','S','N','E','F','G')))
					THEN FEEDER_SYSTEM = 'SPS TRANSACTIONS FROM DCAS';

	ELSE IF USR_ID IN ('$PAYD','$PAYDISB','PEND1PAY') THEN FEEDER_SYSTEM = 'ONE PAY INTERFACE'; 

	ELSE IF USR_ID IN ('********') THEN FEEDER_SYSTEM = 'SYSTEM GENERATED - LIQUIDATION OF AN OBLIGATION';

	ELSE IF USR_ID IN ('DISCOUNT') THEN FEEDER_SYSTEM = '510 SYSTEM GENERATED, ORIGINATING FROM A VENDOR PAY DISBURSEMENT ACTION';

	ELSE IF USR_ID = 'DTSUSER' THEN FEEDER_SYSTEM = 'DTS (DEFENSE TRAVEL SYSTEM)INTERFACE';

	ELSE IF USR_ID = 'MSNAP' THEN FEEDER_SYSTEM = 'SHIPBOARD NON-TACTICAL AUTOMATED DATA PROCESSING (SNAP) INTERFACE';

	ELSE IF USR_ID = 'QB1OBLBS' THEN FEEDER_SYSTEM = 'PACIFIC MISSILE RANGE FACILITY-BUSINESS INFORMATION SYSTEM (PMRF-BIS) INTERFACE';

	ELSE IF USR_ID = 'QB1OBLNM' THEN FEEDER_SYSTEM = 'NEMAIS INTERFACE';

	ELSE IF USR_ID = 'QB1OBLST' THEN FEEDER_SYSTEM = 'SALTS INTERFACE';

	ELSE IF USR_ID = 'RSUPP' THEN FEEDER_SYSTEM = 'RSUPPLY TRANSACTION/INTERFACE';

	ELSE IF USR_ID IN ('$PAYDIT') AND DATA_SRC_CODE = 'O' THEN FEEDER_SYSTEM = 'ONE PAY INTERFACE';

	ELSE IF SUBSTR(USR_ID,1,6) = 'VJSRC=' AND SUBSTR(USR_ID,LENGTH(USR_ID),1) = '*' THEN FEEDER_SYSTEM = 'SYSTEM GENERATED TRANSACTION (VJSRC TRANSACTIONS)'; /*PER KATIE'S EMAIL ON 01/09/13 TO BUCKET ALL EUDS INTO TWO BUCKETS */

	ELSE IF USR_ID	= 'ARBATCH' THEN FEEDER_SYSTEM = 'ACCOUNTS RECEIVABLE DUE FROM VENDORS';

	ELSE IF USR_ID	= 'FLTRCD' AND DATA_SRC_CODE = '{' THEN FEEDER_SYSTEM = 'SALTS INTERFACE - TRANSMITTAL LETTER OBLIGS FROM FLEET (BATCH)';

	ELSE IF USR_ID	= 'LXR2101' THEN FEEDER_SYSTEM = 'APPLICATION PROGRAM GENERATED UP/DOWN ADJUSTMENT (GENERATED BY BATCH PROGRAM)';

	ELSE IF USR_ID	= 'LXR4301' THEN FEEDER_SYSTEM = 'APPLICATION PROGRAM GENERATED COMMITMENT LIQUIDATION';

	ELSE IF USR_ID	= 'LXR5103' THEN FEEDER_SYSTEM = 'APPLICATION PROGRAM GENERATED	(BATCH POSTING TO RDT&E OVERHEAD)';

	ELSE IF USR_ID	 = 'SU0' AND DATA_SRC_CODE = '>' THEN FEEDER_SYSTEM = 'INTERFACE TRANSACTIONS - STATION USE (ASHORE ONLY)'; /* CHANGED INTERFACE NAME FROM SNAP2...PER KATIE'S EMAIL ON 01/08/ */

	ELSE IF USR_ID = 'SU0' AND DATA_SRC_CODE = '8' THEN FEEDER_SYSTEM = 'FASTDATA INTERFACE (NON-RWO SAMPLE)';

	ELSE IF USR_ID	= 'VJSRC=B' THEN FEEDER_SYSTEM = 'MACHINE GENERATED 201/202 REIMBURSABLE (ALSO FUNDS WITHDRAWAL 122/121)';

	ELSE IF USR_ID	= 'QB1OBL' THEN FEEDER_SYSTEM = 'SENT VIA MQ SERIES INTERFACE (USR_ID = QB1OBL)';

	ELSE IF USR_ID	= 'QB1OBLBP' THEN FEEDER_SYSTEM = 'NSIPS-POEMS INTERFACE';

	ELSE IF USR_ID	= 'QB1OBLEP' THEN FEEDER_SYSTEM = 'NAVY ERP 1.1 INTERFACE';

	ELSE IF USR_ID	IN ('LABOR=+') AND USR_ID NOT IN ('LABOR=+*') THEN FEEDER_SYSTEM = 'FOREIGN NATIONAL LABOR-DIRECT: INTERFACE LOAD FILE PROVIDED ON CUSTOMER-BY-CUSTOMER BASIS';

	ELSE IF USR_ID	IN ('LABOR=#') AND USR_ID NOT IN ('LABOR=#*') THEN FEEDER_SYSTEM = 'FOREIGN NATIONAL LABOR-INDIRECT: INTERFACE LOAD FILE PROVIDED ON CUSTOMER-BY-CUSTOMER BASIS';

	ELSE IF SUBSTR(USR_ID,1,6) = 'LABOR=' AND USR_ID NOT IN ('LABOR=#','LABOR=+') AND SUBSTR(USR_ID,LENGTH(USR_ID),1) ^= '*' 
		AND SUBSTR(PY_VCH_NR,1,3) IN ('CP1','OMA','ZFA','ZFR','ZGT','ZKA','ZKE','ZL0','ZPA','ZPB','ZPD','ZPH','ZPV') THEN FEEDER_SYSTEM = 'DCPS INTERFACE'; /* CHANGES PER PHONE CONVERSATION WITH KATIE, CHANGED 'OR' TO 'AND' - 01-08-13 */

	ELSE IF SUBSTR (USR_ID,1,6) = 'LABOR=' AND SUBSTR(USR_ID,LENGTH(USR_ID),1) = '*' THEN FEEDER_SYSTEM = 'SYSTEM GENERATED LABOR TRANSACTION';

	ELSE IF DATA_SRC_CODE	= "'" 
		OR SUBSTR(USR_ID,LENGTH(STRIP(USR_ID))-1,2) IN ('WA','WM') THEN FEEDER_SYSTEM = 'WAWF (WIDE AREA WORK FLOW)';

	ELSE IF USR_ID = 'PCUSER' THEN FEEDER_SYSTEM = 'PURCHASE CARD (CITIDIRECT)';

	ELSE IF DATA_SRC_CODE	= '0' AND USR_ID = 'SPS' THEN FEEDER_SYSTEM = 'SPS (STANDARD PROCUREMENT SYSTEM)';

	ELSE IF DATA_SRC_CODE	= '0' AND USR_ID IN ('EDI850','EDI860') THEN FEEDER_SYSTEM = 'EDS/NMCI EMARKETPLACE INTERFACE';

	ELSE IF DATA_SRC_CODE IN ('V','W') AND NOT (SUBSTR(USR_ID,1,6) = 'VJSRC=' AND SUBSTR(USR_ID,LENGTH(USR_ID),1) = '*') THEN FEEDER_SYSTEM = 'EUD'; /*PER KATIE'S EMAIL ON 01/09/13 TO BUCKET ALL EUDS INTO TWO BUCKETS*/	

	ELSE IF SUBSTR(USR_ID,1,2) = 'SU' THEN FEEDER_SYSTEM = 'INTERFACE TRANSACTIONS - STATION USE (ASHORE ONLY)';

	ELSE IF USR_ID IN ("$PAYDBA","$PAYDSP") THEN FEEDER_SYSTEM = 'ONE PAY INTERFACE';

	ELSE IF DATA_SRC_CODE = 'Q' THEN FEEDER_SYSTEM = 'IDABI INTERFACE';

	ELSE IF USR_ID = 'ESC' THEN FEEDER_SYSTEM = 'SHIPBOARD NON-TACTICAL AUTOMATED DATA PROCESSING (SNAP2) INTERFACE (PENDING)';

	ELSE IF USR_ID = 'VJSRC=A' AND DATA_SRC_CODE = 'A' THEN FEEDER_SYSTEM = 'HCM INTERFACE - EVENT DRIVEN (MECHANIZED AUTHORIZATIONS)';

	ELSE IF DATA_SRC_CODE = 'Y' AND USR_ID = 'QB1OBLBU' THEN FEEDER_SYSTEM = 'NSIPS-POEMS INTERFACE';
	
	ELSE IF DATA_SRC_CODE = 'Y' AND USR_ID = 'QB1OBLEX' THEN FEEDER_SYSTEM = 'EXPEDITIONARY MANAGEMENT INFORMATION SYSTEM(EXMIS) INTERFACE';

	ELSE IF DATA_SRC_CODE = 'Y' AND USR_ID = 'QB1OBLFS' THEN FEEDER_SYSTEM = 'FUELS AUTOMATED SYSTEM (FAS) ENTERPRISE SERVER (FES) INTERFACE';

	ELSE IF DATA_SRC_CODE = 'Y' AND USR_ID = 'QB1OBLLD' THEN FEEDER_SYSTEM = 'TRIDENT LOGISTICS DATA SYSTEM (LDS) INTERFACE';

	ELSE IF DATA_SRC_CODE = 'Y' AND USR_ID = 'QB1OBLMF' THEN FEEDER_SYSTEM = 'MATERIAL FINANCIAL CONTROL SYSTEM (MFCS) INTERFACE';

	ELSE IF DATA_SRC_CODE = 'Y' AND USR_ID = 'QB1OBLSN' THEN FEEDER_SYSTEM = 'SHIPBOARD NON-TACTICAL AUTOMATED DATA PROCESSING (SNAP) INTERFACE';

	ELSE IF DATA_SRC_CODE = 'Y' AND USR_ID = 'BIS00001' THEN FEEDER_SYSTEM = 'PACIFIC MISSILE RANGE FACILITY-BUSINESS INFORMATION SYSTEM (PMRF-BIS) INTERFACE';

	ELSE IF DATA_SRC_CODE = 'Y' AND USR_ID = 'PTUSER' THEN FEEDER_SYSTEM = 'POWERTRACK INTERFACE';

	ELSE IF DATA_SRC_CODE = 'Y' AND USR_ID = 'RWOFREEZ' THEN FEEDER_SYSTEM = 'SYSTEM GENERATED - PREVAL FOR STARS-TO-STARS REIMBURSABLES';

	ELSE IF DATA_SRC_CODE = '6' THEN FEEDER_SYSTEM = 'STATION USE & R-SUPPLY INTERFACE';

	ELSE IF DATA_SRC_CODE = '>' THEN FEEDER_SYSTEM = 'SHIPBOARD NON-TACTICAL AUTOMATED DATA PROCESSING (SNAP2) INTERFACE';

	ELSE IF DATA_SRC_CODE = 'O' THEN FEEDER_SYSTEM = 'ONE PAY INTERFACE';

	ELSE IF DATA_SRC_CODE = '\' THEN FEEDER_SYSTEM = 'INTERFACE FILE - PSEUDO OBLIGATIONS (BOR ADJUST OR AV FUEL)';

	ELSE IF DATA_SRC_CODE = 'N' AND USR_ID = 'SPR0058' AND MEMO = '02-11-040-CONV' THEN FEEDER_SYSTEM = 'SYSTEM GENERATED - DATABASE MAINTENANCE AUTHORIZATION ADJUSTMENTS';

	ELSE IF USR_ID = 'QB1OBLEP' AND DOC_PRCS_TYP = 'T' THEN FEEDER_SYSTEM = 'ADJUSTMENTS FROM NAVY ERP 1.1';

	ELSE IF USR_ID	= 'QB1OBLEP' AND DOC_PRCS_TYP ^= 'T' THEN FEEDER_SYSTEM = 'TRANSACTIONS FROM NAVY ERP 1.1';

	ELSE IF DATA_SRC_CODE = 'O' THEN FEEDER_SYSTEM = 'ONE PAY INTERFACE (FADA 610)';

	ELSE IF DATA_SRC_CODE = 'P' THEN FEEDER_SYSTEM = 'ONE PAY INTERFACE (ONE PAY TENTATIVE PAYMENT - PREVAL FOR VENDOR PAYMENT)';

	ELSE IF DATA_SRC_CODE = '/' THEN FEEDER_SYSTEM = 'BOR ADJUST OR AV FUEL (Pseudo Obligations)';

	ELSE IF DATA_SRC_CODE = '5' THEN FEEDER_SYSTEM = 'ZNW (B1 Interface)';

	ELSE IF USR_ID = 'QB1OBLTR' THEN FEEDER_SYSTEM = 'TYCOM Readiness Management System (TRMS) Interface';

	ELSE FEEDER_SYSTEM = 'UNMAPPED';

RUN;

/* SUMMARIZE BY DOCUMENT NUMBER. */
PROC SUMMARY DATA = FL_INTERFACE NWAY MISSING;
	CLASS DOC_KEY;
	VAR AMOUNT_USSGL_FINAL;
	OUTPUT OUT = FL_DOCNO_SUM (DROP=_TYPE_) SUM=;
RUN;

/********************************************************************************************/
/* EXTRACT STARS-FL Q2 FY EUD FEEDER SYSTEM TRANSACTIONS & PERFORM SUMMARIES. 			*/
/********************************************************************************************/

DATA FL_EUD;
	SET FL_INTERFACE;
	IF FEEDER_SYSTEM = 'SPS (STANDARD PROCUREMENT SYSTEM)';
	ABS_AMT = ABS(AMOUNT_USSGL_FINAL);
RUN;

/* SUMMARIZE BY DOCUMENT NUMBER. */
PROC SUMMARY DATA = FL_EUD NWAY MISSING;
	CLASS PIIN;
	VAR AMOUNT_USSGL_FINAL ABS_AMT;
	OUTPUT OUT = EUD_DOCNO_SUM (DROP=_TYPE_) SUM=;
RUN;

PROC SORT DATA = SPS_IN_SCOPE OUT = SPS_SRT;
	BY PIIN;
RUN;

PROC SORT DATA = FL_EUD OUT = FL_EUD_SRT;
	BY PIIN;
RUN;

PROC SUMMARY DATA = SPS_SRT NWAY MISSING;
	CLASS PIIN;
	VAR AMOUNT_USSGL_FINAL ABS_AMT;
	OUTPUT OUT = SPS_SRT_DOC_SUM SUM =;
RUN;

DATA SPS_DOCNUM_IN_FL_EUD FL_EUD_NO_SPS;
	MERGE SPS_SRT_DOC_SUM (IN = A) FL_EUD_SRT (IN = B);
	BY PIIN;

	IF B AND A THEN OUTPUT SPS_DOCNUM_IN_FL_EUD;
	ELSE IF B AND NOT A THEN OUTPUT FL_EUD_NO_SPS;
RUN;

PROC SUMMARY DATA = SPS_DOCNUM_IN_FL_EUD NWAY MISSING;
	CLASS PIIN;
	VAR AMOUNT_USSGL_FINAL ABS_AMT;
	OUTPUT OUT = SPS_IN_FL_EUD_DOCNUM SUM =;
RUN;


DATA APR_0400 APR_OTHER;
	SET FL_EUD_NO_SPS;
	IF APN_SYM = '0400' THEN OUTPUT APR_0400;
	ELSE OUTPUT APR_OTHER;
RUN;

PROC SUMMARY DATA = APR_0400 NWAY MISSING;
	CLASS PIIN;
	VAR AMOUNT_USSGL_FINAL;
	OUTPUT OUT = APR_0400_DOCNUM SUM =;
RUN;

PROC SUMMARY DATA = APR_OTHER NWAY MISSING;
	CLASS PIIN;
	VAR AMOUNT_USSGL_FINAL;
	OUTPUT OUT = APR_OTHER_DOCNUM SUM =;
RUN;

PROC SORT DATA = SPS_DOCNUM_IN_FL_EUD OUT = SPS_DOCNUM_IN_FL_EUD_SRT;
	BY PIIN ABS_AMT;
RUN;

PROC SUMMARY DATA = SPS_IN_SCOPE;
	CLASS PIIN ABS_AMT;
	OUTPUT OUT = SPS_SUM (KEEP = PIIN ABS_AMT);
RUN;

PROC SORT DATA = SPS_SUM;
	BY PIIN ABS_AMT;
RUN;

/********************************************************************************************/
/* MERGE DATA																		 		*/
/********************************************************************************************/

DATA SPS_DOC_AMT_IN_EUD EUD_DOC_ONLY_IN_SPS;
	MERGE SPS_SUM (IN = A) SPS_DOCNUM_IN_FL_EUD_SRT (IN = B);
	BY PIIN ABS_AMT;

	IF A AND B THEN OUTPUT SPS_DOC_AMT_IN_EUD;
	ELSE IF B AND NOT A THEN OUTPUT EUD_DOC_ONLY_IN_SPS;
RUN;

PROC SUMMARY DATA = SPS_DOC_AMT_IN_EUD NWAY MISSING;
	CLASS PIIN;
	VAR AMOUNT_USSGL_FINAL ABS_AMT;
	OUTPUT OUT = SPS_ALL_IN_EUD_SUM SUM =;
RUN;

PROC SUMMARY DATA = EUD_DOC_ONLY_IN_SPS NWAY MISSING;
	CLASS PIIN;
	VAR AMOUNT_USSGL_FINAL ABS_AMT;
	OUTPUT OUT = EUD_DOC_ONLY_SUM SUM =;
RUN;

*Prepare data for merge betweeen nonmatches from first FL interface and feeder by document number;

/********************************************************************************************/
/* EXTRACT STARS-FL Q2 FY EUD FEEDER SYSTEM TRANSACTIONS & PERFORM SUMMARIES. 			*/
/********************************************************************************************/


/* SUMMARIZE BY DOCUMENT NUMBER. */

PROC SORT DATA = SPS_IN_SCOPE(RENAME=(DOCUMENT_NR=DOC_KEY)) OUT = SPS_SRT2;
	BY DOC_KEY;
RUN;

PROC SORT DATA = FL_EUD_NO_SPS OUT = FL_EUD_NO_SPS2;
	BY DOC_KEY;
RUN;

PROC SUMMARY DATA = SPS_SRT2 NWAY MISSING;
	CLASS DOC_KEY;
	VAR AMOUNT_USSGL_FINAL ABS_AMT;
	OUTPUT OUT = SPS_SRT_DOC_SUM2 SUM =;
RUN;

DATA SPS_DOCNUM_IN_FL_EUD2 FL_EUD_NO_SPS3;
	MERGE SPS_SRT_DOC_SUM2 (IN = A) FL_EUD_NO_SPS2 (IN = B);
	BY DOC_KEY;

	IF B AND A THEN OUTPUT SPS_DOCNUM_IN_FL_EUD2;
	ELSE IF B AND NOT A THEN OUTPUT FL_EUD_NO_SPS3;
RUN;


PROC SUMMARY DATA = SPS_DOCNUM_IN_FL_EUD2 NWAY MISSING;
	CLASS DOC_KEY;
	VAR AMOUNT_USSGL_FINAL ABS_AMT;
	OUTPUT OUT = SPS_IN_FL_EUD_DOCNUM2 SUM =;
RUN;


DATA APR_04002 APR_OTHER2;
	SET FL_EUD_NO_SPS3;
	IF APN_SYM = '0400' THEN OUTPUT APR_04002;
	ELSE OUTPUT APR_OTHER2;
RUN;

PROC SUMMARY DATA = APR_04002 NWAY MISSING;
	CLASS DOC_KEY;
	VAR AMOUNT_USSGL_FINAL;
	OUTPUT OUT = APR_0400_DOCNUM2 SUM =;
RUN;

PROC SUMMARY DATA = APR_OTHER2 NWAY MISSING;
	CLASS DOC_KEY;
	VAR AMOUNT_USSGL_FINAL;
	OUTPUT OUT = APR_OTHER_DOCNUM2 SUM =;
RUN;

PROC SORT DATA = SPS_DOCNUM_IN_FL_EUD2 OUT = SPS_DOCNUM_IN_FL_EUD_SRT2;
	BY DOC_KEY ABS_AMT;
RUN;

PROC SUMMARY DATA = SPS_SRT2;
	CLASS DOC_KEY ABS_AMT;
	OUTPUT OUT = SPS_SUM2 (KEEP = DOC_KEY ABS_AMT);
RUN;

PROC SORT DATA = SPS_SUM2;
	BY DOC_KEY ABS_AMT;
RUN;

/********************************************************************************************/
/* MERGE DATA																		 		*/
/********************************************************************************************/

DATA SPS_DOC_AMT_IN_EUD2 EUD_DOC_ONLY_IN_SPS2;
	MERGE SPS_SUM2 (IN = A) SPS_DOCNUM_IN_FL_EUD_SRT2 (IN = B);
	BY DOC_KEY ABS_AMT;

	IF A AND B THEN OUTPUT SPS_DOC_AMT_IN_EUD2;
	ELSE IF B AND NOT A THEN OUTPUT EUD_DOC_ONLY_IN_SPS2;
RUN;

PROC SUMMARY DATA = SPS_DOC_AMT_IN_EUD2 NWAY MISSING;
	CLASS DOC_KEY;
	VAR AMOUNT_USSGL_FINAL ABS_AMT;
	OUTPUT OUT = SPS_ALL_IN_EUD_SUM2 SUM =;
RUN;

PROC SUMMARY DATA = EUD_DOC_ONLY_IN_SPS2 NWAY MISSING;
	CLASS DOC_KEY;
	VAR AMOUNT_USSGL_FINAL ABS_AMT;
	OUTPUT OUT = EUD_DOC_ONLY_SUM2 SUM =;
RUN;


*Combine matches found by piin and amount with matches found by doc_key and amount;
data SPS_DOC_AMT_IN_EUD_ALL;
set SPS_DOC_AMT_IN_EUD SPS_DOC_AMT_IN_EUD2;
RUN;


*Combine nonmatches not found by piin and amount with nonmatches not found by doc_key and amount;
data EUD_DOC_ONLY_IN_SPS_ALL;
set EUD_DOC_ONLY_IN_SPS EUD_DOC_ONLY_IN_SPS2;
run;


%CONTROL_TOTALS(FL_EUD_NO_SPS3, AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(SPS_DOC_AMT_IN_EUD_ALL, AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_DOC_AMT_IN_EUD2, AMOUNT_USSGL_FINAL ABS_AMT); *To see individual data set not combined;
%CONTROL_TOTALS(EUD_DOC_ONLY_IN_SPS_ALL, AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(EUD_DOC_ONLY_IN_SPS2, AMOUNT_USSGL_FINAL ABS_AMT);


/********************************************************************************************/
/*                                       EXPORTS		                                    */
/********************************************************************************************/

 
%EXPORT_XLS(match.FL_sps_all);
%EXPORT_XLS(SPS5);
%EXPORT_XLS(SPS_ZERO_AMT );
%EXPORT_XLS(SPS_sub); 
%EXPORT_XLS(SPS_ONLY_doc); 
%EXPORT_XLS(FL_EUD_NO_SPS3); 
%EXPORT_XLS(SPS_DOC_AMT_IN_EUD_ALL);
%EXPORT_XLS(EUD_DOC_ONLY_IN_SPS_ALL); 

/********************************************************************************************/
/*                                       END OF PROGRAM                                     */
/********************************************************************************************/
DM "LOG; FILE 'H:\navy_fmo\Audit Readiness\SEGMENTS\CVP\Feeder System Reconciliation\SPS\comfisc\SAS Codes and Logs\sps_FL_RECON_&DATE..LOG' REPLACE";





/*DATA FL_ALL;
	SET FL_JAN.FL_FY_JAN FL_FEB.FL_FY_FEB;

	WHERE PIIN IN ('N0001909D0018','N0001912D0014','N0016408DWT31','N0018909PZ931','N0024411D0039','N6133910D1003');

RUN;

data fl_subset;
set fl_all;

where apn_sym in ('1804','0735') and apn_sbh in ('70AE','72A0','70BA','22T4','5261','22M8');
run;

%EXPORT_XLS(fl_subset);

data test;
set FL_RECON_INDEX;

where piin in ('N6133910D1003');
run;

data SPS_sub;
set SPS_INDEX;

	WHERE PIIN IN ('N0001909D0018','N0001912D0014','N0016408DWT31','N0018909PZ931','N0024411D0039','N6133910D1003');
run;*/

*Merge SPS_IN_SCOPE with SPS_only _2 that had zero amounts;

Data Sps_only2_AMT;
set Sps_only_doc;
where AMOUNT_USSGL_FINAL IN (0.00);
Run;

Proc Sort Data=Sps_index;
By PIIN;
Run;

Proc Sort Data=Sps_only2_AMT;
By PIIN;
Run;



DATA SPS_ZERO_AMT 
	 SPS_ZERO_ONLY
	 SPS_only2_ONLY;

	MERGE Sps_index (IN = A) 
		 Sps_only2_AMT (IN = B);

	BY PIIN;

	IF A AND B THEN OUTPUT SPS_ZERO_AMT;
	IF A AND NOT B THEN OUTPUT SPS_ZERO_ONLY ;
	IF B AND NOT A THEN OUTPUT SPS_only2_ONLY;

	
RUN;

/********************************************************************************************/
/*                                       CONTROL TOTALS                                     */
/********************************************************************************************/

%CONTROL_TOTALS(SPS_INDEX,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(FL_RECON_INDEX2,AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(FL_RECON_INDEX,AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(MATCH.FL_SPS_ALL,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(FL_AND_SPS_doc,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(FL_AND_SPS2,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(FL_AND_SPS,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(Sps_only2_AMT,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_ZERO_AMT,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_ONLY2,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_ONLY,AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(FL_ONLY2,AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(FL_ONLY,AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(FL_RECON_INDEX,AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(FL_INTERFACE, AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(FL_EUD, AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(EUD_DOCNO_SUM, AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(SPS_DOCNUM_IN_FL_EUD, AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(FL_EUD_NO_SPS, AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(APR_0400, AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(APR_OTHER, AMOUNT_USSGL_FINAL);
%CONTROL_TOTALS(SPS_DOC_AMT_IN_EUD, AMOUNT_USSGL_FINAL ABS_AMT);
%CONTROL_TOTALS(EUD_DOC_ONLY_IN_SPS, AMOUNT_USSGL_FINAL ABS_AMT);


/********************************************************************************************/
/*                                       EXPORTS		                                    */
/********************************************************************************************/

%EXPORT_XLS(sps_ONLY2); 
%EXPORT_XLS(match.FL_sps_all);
%EXPORT_XLS(SPS_sub);
%EXPORT_XLS(SPS_ONLY_doc); 
*%EXPORT_XLS(FL_INTERFACE);
%EXPORT_XLS(FL_EUD ); *FL_EUD (usually row 10 in Excel Wkbk) is Transactions identified in 
STARS-FL that did not have a corresponding posting; 
%EXPORT_XLS(FL_EUD_NO_SPS); *FL_EUD_NO_SPS (usually row 11) is Unmatched Population identified
as SPS transactions (with SDNs not found in the Feeder Population);
%EXPORT_XLS(SPS_DOC_AMT_IN_EUD); *SPS_DOC_AMT_IN_EUD (usually row 12) is Unmatched 
Population Identified as SPS transactions (with SDNs & amounts found in the Feeder Population); 
%EXPORT_XLS(EUD_DOC_ONLY_IN_SPS); *EUD_DOC_ONLY_IN_SPS (usually row13) is(Unmatched Population
Identified as SPS transactions with SDNs (but not matching on the amount);
%EXPORT_XLS(Sps_only2_AMT ); *Sps_only2_AMT is the subset from SPS_ONLY_doc with zero amounts;
%EXPORT_XLS(SPS_ZERO_AMT ); *SPS_ZERO_AMT matched dataset  between Sps_only2_AMT and "Sps_index" (aka: Sps_in_scope);

/********************************************************************************************/
/*                                       END OF PROGRAM                                     */
/********************************************************************************************/
DM "LOG; FILE 'H:\navy_fmo\Audit Readiness\SEGMENTS\CVP\Feeder System Reconciliation\SPS\comfisc\SAS Codes and Logs\sps_FL_RECON_&DATE..LOG' REPLACE";


/*****************************************/
/*RUN POPULATION NOT MATCHED BETWEEN FL  */ 
/*AND SPS TO IDENTIFY CONCERNS         */
/*****************************************/

/*PARSE OUT DATA TO IDENTIFY WHY MATCHES ARE NOT FOUND FROM FEEDER TO GL*/

/*CREATE DISTINC PIINS TO QUERY AND IDENTIFY THOSE TRANSACTIONS WHERE SDNS
  CANNOT BE FOUND BETWEEN THE GL AND FEEDER*/
proc summary data=match.SPS_only2 nway missing;
class piin;
output out=distinct_PII_SPS;
run;

data FL_non_matches;
set FL_only
	FL_only2;
keep PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL gl4;
run;

proc sort data=FL_non_matches;
by PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL gl4;
run;

proc summary data=FL_non_matches nway missing;
class piin;
output out=distinct_PII_FL;
run;
/*CREATES A LIST OF PIINS FROM FEEDER THAT ARE FOUND IN GL*/
DATA PII_MATCH 
	 IN_FL_ONLY
	 IN_SPS_ONLY;

	MERGE distinct_PII_FL (IN = A) 
		  distinct_PII_SPS (IN = B);

	BY PIIN;

	IF A AND B THEN OUTPUT PII_MATCH;
	IF A AND NOT B THEN OUTPUT IN_FL_ONLY;
	IF B AND NOT A THEN OUTPUT IN_SPS_ONLY;

	keep piin;
RUN;
/*GET DETAIL FOR PIINS THAT CAN BE FOUND IN GL FROM THE FEEDER FILE*/
DATA MATCH_SPS
	 IN_SUB_NOT_MAST
	 IN_MAST_NOT_SUB;

	MERGE PII_MATCH (IN = A) 
		  match.SPS_only2 (IN = B);

	BY PIIN;

	IF A AND B THEN OUTPUT MATCH_SPS;
	IF A AND NOT B THEN OUTPUT IN_SUB_NOT_MAST;
	IF B AND NOT A THEN OUTPUT IN_MAST_NOT_SUB;
RUN;
/*GET DETAIL FOR PIINS THAT CAN BE FOUND IN GL FROM THE FL FILE*/
DATA MATCH_FL
	 IN_SUB_NOT_MAST2
	 IN_MAST_NOT_SUB2;

	MERGE PII_MATCH (IN = A) 
		  FL_non_matches (IN = B);

	BY PIIN;

	IF A AND B THEN OUTPUT MATCH_FL;
	IF A AND NOT B THEN OUTPUT IN_SUB_NOT_MAST2;
	IF B AND NOT A THEN OUTPUT IN_MAST_NOT_SUB2;
RUN;

/*PULL DETAIL OF THOSE PIINS NOT FOUND IN THE GL FROM THE FEEDER*/
DATA NON_MATCH_SPS
	 IN_SUB_NOT_MAST3
	 IN_MAST_NOT_SUB3;

	MERGE IN_SPS_ONLY (IN = A) 
		  match.SPS_only2 (IN = B);

	BY PIIN;

	IF A AND B THEN OUTPUT NON_MATCH_SPS;
	IF A AND NOT B THEN OUTPUT IN_SUB_NOT_MAST3;
	IF B AND NOT A THEN OUTPUT IN_MAST_NOT_SUB3;
RUN;
/*PS:  I dont think we need any of this from the merge to here.  Move to teh bottom of the code after log export*/

/


*Find 1010 for Jeremey. This step is not part of code;
DATA FL_CM_TN;
	SET FL_AND_comfisc2;
where GL4 IN ('1010');
run; 

*Merge filtered dataset (1010 in GL4 from FL_and_comfisc) with FL_Recon_Index for Jeremy. This step is not part of code; 
DATA FCTFR;

	MERGE comfisc.FL_RECON_INDEX (IN = AA2) 
		  FL_CM_TN (IN = BB2);

	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;

	IF AA2 AND BB2 THEN OUTPUT FCTFR;
RUN;

*Make new FL datasets where GL4 in 4*** only;

DATA FL_RECON_JAN2;
	SET FL_JAN.FL_FY_JAN;
	where APN_BEG_FIS_YR IN ('13') and
	SUBSTR(GL4,1,1)='4';
RUN;

DATA FL_RECON_FEB2;
	SET FL_FEB.FL_FY_FEB;
	where APN_BEG_FIS_YR IN ('13') and
	SUBSTR(GL4,1,1)='4';
RUN;

*Get merged results of FL with Comfisc data;
DATA FL_AND_comfisc 
	 FL_ONLY_com 
	 comfisc_ONLY;

	MERGE FL_RECON_INDEX (IN = A) 
		  comfisc_index (IN = B);

	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX;

	IF A AND B THEN OUTPUT FL_AND_comfisc;
	IF A AND NOT B THEN OUTPUT FL_ONLY_com;
	IF B AND NOT A THEN OUTPUT comfisc_ONLY;
RUN;

DATA FL_AND_nav
	 FL_ONLY_nav 
	 nav_ONLY;

	MERGE FL_RECON_INDEX (IN = A) 
		  nav_INDEX (IN = B);

	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX;

	IF A AND B THEN OUTPUT FL_AND_nav;
	IF A AND NOT B THEN OUTPUT FL_ONLY_nav;
	IF B AND NOT A THEN OUTPUT nav_ONLY;
RUN;

*Run frequency on GL4;
proc freq data=match.FL_SPS_ALL;
	tables GL4;
run;

proc means data=FL_RECON_INDEX sum;
var AMOUNT_USSGL_FINAL;
run;

proc means data=FL_RECON_INDEX2 sum;
var AMOUNT_USSGL_FINAL;
run;

proc means data=match.FL_SPS_ALL sum;
var AMOUNT_USSGL_FINAL ABS_AMT;
run;


/*****************************************/
/*RUN POPULATION NOT MATCHED BETWEEN FL  */ 
/*AND SPS TO IDENTIFY CONCERNS         */
/*****************************************/

/*PARSE OUT DATA TO IDENTIFY WHY MATCHES ARE NOT FOUND FROM FEEDER TO GL*/

/*CREATE DISTINC PIINS TO QUERY AND IDENTIFY THOSE TRANSACTIONS WHERE SDNS
  CANNOT BE FOUND BETWEEN THE GL AND FEEDER*/
proc summary data=match.SPS_only2 nway missing;
class piin;
output out=distinct_PII_SPS;
run;

data FL_non_matches;
set FL_only
	FL_only2;
keep PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL gl4;
run;

proc sort data=FL_non_matches;
by PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL gl4;
run;

proc summary data=FL_non_matches nway missing;
class piin;
output out=distinct_PII_FL;
run;
/*CREATES A LIST OF PIINS FROM FEEDER THAT ARE FOUND IN GL*/
DATA PII_MATCH 
	 IN_FL_ONLY
	 IN_SPS_ONLY;

	MERGE distinct_PII_FL (IN = A) 
		  distinct_PII_SPS (IN = B);

	BY PIIN;

	IF A AND B THEN OUTPUT PII_MATCH;
	IF A AND NOT B THEN OUTPUT IN_FL_ONLY;
	IF B AND NOT A THEN OUTPUT IN_SPS_ONLY;

	keep piin;
RUN;
/*GET DETAIL FOR PIINS THAT CAN BE FOUND IN GL FROM THE FEEDER FILE*/
DATA MATCH_SPS
	 IN_SUB_NOT_MAST
	 IN_MAST_NOT_SUB;

	MERGE PII_MATCH (IN = A) 
		  match.SPS_only2 (IN = B);

	BY PIIN;

	IF A AND B THEN OUTPUT MATCH_SPS;
	IF A AND NOT B THEN OUTPUT IN_SUB_NOT_MAST;
	IF B AND NOT A THEN OUTPUT IN_MAST_NOT_SUB;
RUN;
/*GET DETAIL FOR PIINS THAT CAN BE FOUND IN GL FROM THE FL FILE*/
DATA MATCH_FL
	 IN_SUB_NOT_MAST2
	 IN_MAST_NOT_SUB2;

	MERGE PII_MATCH (IN = A) 
		  FL_non_matches (IN = B);

	BY PIIN;

	IF A AND B THEN OUTPUT MATCH_FL;
	IF A AND NOT B THEN OUTPUT IN_SUB_NOT_MAST2;
	IF B AND NOT A THEN OUTPUT IN_MAST_NOT_SUB2;
RUN;

/*PULL DETAIL OF THOSE PIINS NOT FOUND IN THE GL FROM THE FEEDER*/
DATA NON_MATCH_SPS
	 IN_SUB_NOT_MAST3
	 IN_MAST_NOT_SUB3;

	MERGE IN_SPS_ONLY (IN = A) 
		  match.SPS_only2 (IN = B);

	BY PIIN;

	IF A AND B THEN OUTPUT NON_MATCH_SPS;
	IF A AND NOT B THEN OUTPUT IN_SUB_NOT_MAST3;
	IF B AND NOT A THEN OUTPUT IN_MAST_NOT_SUB3;
RUN;
/*PS:  I dont think we need any of this from the merge to here.  Move to teh bottom of the code after log export*/

/


*Find 1010 for Jeremey. This step is not part of code;
DATA FL_CM_TN;
	SET FL_AND_comfisc2;
where GL4 IN ('1010');
run; 

*Merge filtered dataset (1010 in GL4 from FL_and_comfisc) with FL_Recon_Index for Jeremy. This step is not part of code; 
DATA FCTFR;

	MERGE comfisc.FL_RECON_INDEX (IN = AA2) 
		  FL_CM_TN (IN = BB2);

	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL;

	IF AA2 AND BB2 THEN OUTPUT FCTFR;
RUN;

*Make new FL datasets where GL4 in 4*** only;

DATA FL_RECON_JAN2;
	SET FL_JAN.FL_FY_JAN;
	where APN_BEG_FIS_YR IN ('13') and
	SUBSTR(GL4,1,1)='4';
RUN;

DATA FL_RECON_FEB2;
	SET FL_FEB.FL_FY_FEB;
	where APN_BEG_FIS_YR IN ('13') and
	SUBSTR(GL4,1,1)='4';
RUN;

*Get merged results of FL with Comfisc data;
DATA FL_AND_comfisc 
	 FL_ONLY_com 
	 comfisc_ONLY;

	MERGE FL_RECON_INDEX (IN = A) 
		  comfisc_index (IN = B);

	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX;

	IF A AND B THEN OUTPUT FL_AND_comfisc;
	IF A AND NOT B THEN OUTPUT FL_ONLY_com;
	IF B AND NOT A THEN OUTPUT comfisc_ONLY;
RUN;

DATA FL_AND_nav
	 FL_ONLY_nav 
	 nav_ONLY;

	MERGE FL_RECON_INDEX (IN = A) 
		  nav_INDEX (IN = B);

	BY PIIN APN_SBH APN_SYM AMOUNT_USSGL_FINAL INDEX;

	IF A AND B THEN OUTPUT FL_AND_nav;
	IF A AND NOT B THEN OUTPUT FL_ONLY_nav;
	IF B AND NOT A THEN OUTPUT nav_ONLY;
RUN;

*Run frequency on GL4;
proc freq data=match.FL_SPS_ALL;
	tables GL4;
run;

proc means data=FL_RECON_INDEX sum;
var AMOUNT_USSGL_FINAL;
run;

proc means data=FL_RECON_INDEX2 sum;
var AMOUNT_USSGL_FINAL;
run;

proc means data=match.FL_SPS_ALL sum;
var AMOUNT_USSGL_FINAL ABS_AMT;
run;

proc means data=FL_JAN.FL_FY_JAN;
var GL4;
run;
FL_JAN.FL_FY_JAN FL_FEB.FL_FY_FEB
FL_RECON;


PROC IMPORT OUT=SPS_UNMATCH 
DATAFILE = "H:\navy_fmo\Audit Readiness\SEGMENTS\CVP\Feeder System Reconciliation\SPS\COMFISC\Outputs\Output_0515_modified.xls"

DBMS = EXCEL REPLACE; 
SHEET = "'SPS_ONLY_doc'"; 
GETNAMES = YES; 
MIXED=NO; 
SCANTEXT=YES; 
USEDATE=YES; 
SCANTIME=YES; 
RUN; 

data sps_unmatch2;
set sps_unmatch;
run;
